total<5000
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
cpenames[1]
cpenames[[1]
a
cpenames[[1]]
cpenames.title[[1]]
head(cpenames)
ldply(cpenames)
class(ldply(cpenames))
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
cpnames[1]
cpenames[1]
cpenames[1;1]
cpenames[1,1]
cpenames[,1]
cpenames[1,]
cpenames[2,]
cpenames[3,]
cpenames[4,]
View(cpenames)
View(cpenames)
cpenames$total <- lapply(cpenames[,3],length())
cpenames$total <- lapply(cpenames[,3],length)
cpenames[4,]
View(cpenames)
View(cpenames)
cpenames <- cpenames[order(total),decreasing = TRUE]
cpenames <- cpenames[order(total,decreasing = TRUE),]
cpenames[4,]
cpename[1,1]
cpenames[1,1]
cpenames[1,4]
cpenames$total
View(cpenames)
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R')
View(cpenames)
View(cpenames)
class(cpenames$total)
class(cpenames$total[1])
class(cpenames$total[2])
source('C:/DEVEL/DMProject/DMVuln.R')
View(vuln)
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R')
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
View(test)
View(test)
test[1,]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
View(cpeordered)
View(cpeordered)
cpeordered[1:2,]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help(ggplot)
ggplot(cpemorevuln)
View(cpemorevuln)
View(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x=title,y=total))
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x=title,y=total))
ggplot(data = cpemorevuln, aes(x = title, y=total, fill = as.factor(color))) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x = title, y=total, fill = as.factor(color))) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x = title, y=total)) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
View(cpemorevuln)
View(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1
graphic1 + geom_bar()
graphic1 + geom_line()
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 + geom_line()
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
class(cpemorevuln[1,4])
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color), y = total))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = total, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
help("ggplot2")
help(ggplot)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(y = total, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total), colour = 'red')
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("siemens")
CPEVULN("rockwell")
class(cpeordered)
sum(cpeordered$total)
length(prod)
prod[1]
prod
stat = "siemens"
length(stat)
stat[1]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
print(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
print(jason1)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
CPEVULN("Rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
CPEVULN("rockwell")
View(CPEVULN)
i = 0
while (i<length(prod)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,prod[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(prod)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
prod[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
prod
library(jsonlite)
library(mitre)
library(burro)
library(dplyr)
library(ggplot2)
library(plyr)
library(markdown)
library(knitr)
CPEVULN <- function(producto){
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
producto[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
print(producto[1])
CPEVULN <- function(producto = "Siemens"){
print(producto[1])
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
producto[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help("append")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
lenght(vulntotal)
length(vulntotal)
append(vulntotal, 123, after = 1)
library(jsonlite)
library(mitre)
library(burro)
library(dplyr)
library(ggplot2)
library(plyr)
library(markdown)
library(knitr)
producto = c("rockwell","siemens","microsoft")
print(producto[1])
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
vulntotal
suma
append(vulntotal,suma,after = length(vulntotal))
print(i)
if (i==1){print("Si")}else{print("No")}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help(head)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
