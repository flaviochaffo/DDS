<<<<<<< Updated upstream
total<5000
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
cpenames[1]
cpenames[[1]
a
cpenames[[1]]
cpenames.title[[1]]
head(cpenames)
ldply(cpenames)
class(ldply(cpenames))
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
source('C:/DEVEL/DMProject/DMVuln.R')
cpnames[1]
cpenames[1]
cpenames[1;1]
cpenames[1,1]
cpenames[,1]
cpenames[1,]
cpenames[2,]
cpenames[3,]
cpenames[4,]
View(cpenames)
View(cpenames)
cpenames$total <- lapply(cpenames[,3],length())
cpenames$total <- lapply(cpenames[,3],length)
cpenames[4,]
View(cpenames)
View(cpenames)
cpenames <- cpenames[order(total),decreasing = TRUE]
cpenames <- cpenames[order(total,decreasing = TRUE),]
cpenames[4,]
cpename[1,1]
cpenames[1,1]
cpenames[1,4]
cpenames$total
View(cpenames)
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R')
View(cpenames)
View(cpenames)
class(cpenames$total)
class(cpenames$total[1])
class(cpenames$total[2])
source('C:/DEVEL/DMProject/DMVuln.R')
View(vuln)
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R')
View(cpenames)
View(cpenames)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
View(test)
View(test)
test[1,]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
View(cpeordered)
View(cpeordered)
cpeordered[1:2,]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help(ggplot)
ggplot(cpemorevuln)
View(cpemorevuln)
View(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x=title,y=total))
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x=title,y=total))
ggplot(data = cpemorevuln, aes(x = title, y=total, fill = as.factor(color))) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x = title, y=total, fill = as.factor(color))) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
ggplot(data = cpemorevuln, aes(x = title, y=total)) +
geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
View(cpemorevuln)
View(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1
graphic1 + geom_bar()
graphic1 + geom_line()
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 + geom_line()
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
class(cpemorevuln[1,4])
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color), y = total))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = total, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
help("ggplot2")
help(ggplot)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(y = total, fill = as.factor(color)))
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total), colour = 'red')
graphic1 + geom_bar() +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("siemens")
CPEVULN("rockwell")
class(cpeordered)
sum(cpeordered$total)
length(prod)
prod[1]
prod
stat = "siemens"
length(stat)
stat[1]
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
print(cpemorevuln)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
print(jason1)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
CPEVULN("Rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("Rockwell")
CPEVULN("rockwell")
View(CPEVULN)
i = 0
while (i<length(prod)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,prod[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(prod)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
prod[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
prod
=======
CAPECordered$RiskScore[i] <- CAPECordered$LikelihoodScore[i]*CAPECordered$SeverityScore[i]
if (CAPECordered$RiskScore[i]<=6){
CAPECordered$Risk[i] <- "Low"
}
if ((CAPECordered$RiskScore[i]>6)&(CAPECordered$RiskScore[i]<=12)){
CAPECordered$Risk[i] <- "Medium"
}
if ((CAPECordered$RiskScore[i]>12)&(CAPECordered$RiskScore[i]<18)){
CAPECordered$Risk[i] <- "High"
}
if (CAPECordered$RiskScore[i]>=18){
CAPECordered$Risk[i] <- "Critical"
}
i <- i + 1
}
plot <- ggplot(CAPECordered, aes(x = Likelihood, y = Severity)) + geom_tile(aes(fill= Risk)) + scale_fill_manual(breaks = c("Critical","High","Medium","Low"),values = c("Red","Orange","Yellow","Green"))
plot + scale_x_discrete(limit = c("Unknown", "Low", "Medium","High"))+
scale_y_discrete(limit = c("Unknown","Very Low", "Low", "Medium","High","Very High")) + geom_label_repel(label=CAPECordered$CAPEC,
nudge_x = 0, nudge_y = 0,
size =3, max.overlaps = 139)
load(file="capec.relations.rda")
#DMMitre
>>>>>>> Stashed changes
library(jsonlite)
library(mitre)
library(burro)
library(dplyr)
library(ggplot2)
library(plyr)
library(markdown)
library(knitr)
<<<<<<< Updated upstream
CPEVULN <- function(producto){
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
producto[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
CPEVULN("rockwell")
print(producto[1])
CPEVULN <- function(producto = "Siemens"){
print(producto[1])
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
producto[i,2] <- sum(cpenames$total)
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help("append")
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
lenght(vulntotal)
length(vulntotal)
append(vulntotal, 123, after = 1)
=======
library(stringr)
library(ggrepel)
capec.relations <- data.frame(capec.relations)
mitre <- subset(capec.relations,capec.relations$name == "ATTACK")
mitre2 <- subset(capec.relations,capec.relations$name == "ChildOf")
mitre3 <- subset(capec.relations,capec.relations$name == "take advantage of")
i <- 1
while (i <= nrow((CAPECordered)))
{
aux <- list(subset(mitre,mitre$from == CAPECordered$CAPEC[i])[,3])
if (length(grep("T",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
aux <- list(subset(mitre2,mitre2$from == CAPECordered$CAPEC[i])[,3])
if (length(grep("C",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
aux <- list(subset(mitre3,mitre3$from == CAPECordered$CAPEC[i])[,3])
if(length(grep("C",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
CAPECordered$Relations[i] <- 0
}
}
}
i <- i + 1
}
test <- data.frame(CAPECordered[grep("^T",CAPECordered$Relations),])
aux <- nrow(test)                               #Cuento todas las líneas de CWEs
MITRE <- data.frame(str_split(test$Relations[1],","))                 #Llevo a un nuevo dataframe todas los CVEs del primer CPE
#CAPEC <- unlist(strsplit(CAPEC$CAPEC[1], split=':', fixed=TRUE))[2]
colnames(MITRE) <- "Techniques"                               #Le pongo de nombre a la columna CVEs
i <- 2                                                #Auxiliar en 2
while (i <= aux){                                     #Voy añadiendo al dataframe anterior todas las listas de CVEs que existen en el dataframe CPE
MITRE2 <- data.frame(str_split(test$Relations[i],","))
colnames(MITRE2) <- "Techniques"
MITRE <- rbind(MITRE,MITRE2)
distinct(MITRE)
i <- i + 1
}
i <- 2
while (i <= nrow(MITRE)){
j <- i - 1
while (j > 0){
if (MITRE[i,1] == MITRE[j,1]){
MITRE[i,1] <- 0
}
j <- j - 1
}
i <- i + 1
}
MITREf <- data.frame(MITRE[1,])
colnames(MITREf) <- c("Techniques")
i <- 2
while (i <= nrow(MITRE)){
if(MITRE[i,1] != 0){
MITREf <- rbind(MITREf,MITRE[i,])
}
i <- i + 1
}
MITREf$total <- lapply(lapply(MITREf[,1],test$Relations,FUN = grep), length)
MITREf$pos <- lapply(MITREf[,1],test$Relations,FUN = grep)
MITREf$total <- as.numeric(MITREf[,2])
MITREordered <- MITREf[order(MITREf$total,decreasing = TRUE),]
graphic1 <- ggplot(data = MITREordered, mapping = aes(x = total, y = Techniques, fill = as.factor(Techniques)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de Técnicas de Ataque") +
ylab("Techniques") +
ggtitle(paste("Gráfico de las técnicas de ataques presentes en",producto,sep = " ")) +
labs(fill = "Techniques")
i <- 1
while (i<= nrow(MITREordered))
{
MITREordered$CAPEC[i] <- CAPECordered$CAPEC[unlist(MITREf$pos[i])]
aux <- grep(paste("^",MITREordered$Techniques[i],"$",sep=""),attck.techniques$external_id)
if (length(aux)==1)
{
MITREordered$Name[i] <- attck.techniques$name[aux]
MITREordered$Description[i] <- attck.techniques$description[aux]
MITREordered$Url[i] <- attck.techniques$url[aux]
}else{
MITREordered$Name[i] <- attck.techniques$name[aux[1]]
MITREordered$Description[i] <- attck.techniques$description[aux[1]]
MITREordered$Url[i] <- attck.techniques$url[aux[1]]
}
i <- i + 1
}
load(file="shield.relations.rda")
load(file="shield.techniques.rda")
#DMSD
>>>>>>> Stashed changes
library(jsonlite)
library(mitre)
library(burro)
library(dplyr)
library(ggplot2)
library(plyr)
library(markdown)
library(knitr)
<<<<<<< Updated upstream
producto = c("rockwell","siemens","microsoft")
print(producto[1])
i = 0
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
while (i<length(producto)){
i = i + 1
jasons <- "https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword="
jasone <- "&addOns=cves"
jason1 <- paste(jasons,producto[i],jasone, sep = "")
print(jason1)
api <- fromJSON(jason1)
#api <- fromJSON("https://services.nvd.nist.gov/rest/json/cpes/1.0?keyword=siemens&addOns=cves") #Puedes cambiar siemens por cualquier otro producto
total <- api$totalResults
if (total <= 5000){
api <- fromJSON(paste(jason1,"&startIndex=0&resultsPerPage=5000",sep = "")) #Obtenemos la lista completa de cpes
}
if (length(producto)> 1){
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
suma <- sum(cpenames$total)
if (i==1){
vulntotal <- c(suma)
}else {
append(vulntotal,suma,after = length(vulntotal))
}
} else{
vuln <- api$result$cpes$vulnerabilities  #Separamos la lista de vulnerabilidades
cpe <- api$result$cpes  # Separamoos el dataframe de CPEs
cpenames <- ldply(cpe$titles)  #Convertimos a dataframe la lista de CPEs
cpenames$vuln <- vuln               #Añadimos la lista de vulnerabilidades como una columna al dataframe de CPEs
cpenames$total <- as.numeric(lapply(cpenames[,3],length))
cpeordered <- cpenames[order(cpenames$total,decreasing = TRUE),]
print(sum(cpeordered$total))
cpemorevuln <- cpeordered[1:10,]
color <- c(1,2,3,4,5,6,7,8,9,10)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = title, y = total, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("CPE") +
ylab("Total de vulnerabilidades") +
ggtitle("Gráfico de los 10 CPEs más vulnerables") +
labs(fill = "CPEs")
}
}
print(producto)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
vulntotal
suma
append(vulntotal,suma,after = length(vulntotal))
print(i)
if (i==1){print("Si")}else{print("No")}
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
help(head)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
=======
library(stringr)
library(ggrepel)
library(xml2)
i <- 1
while (i<= nrow(MITREordered))
{
aux <- grep(paste("^",MITREordered$Techniques[i],"$",sep=""),shield.relations$to)
if (length(aux)>=1)
{
MITREordered$Shield[i] <- list(shield.relations$from[aux])
}else{
aux <- grep(paste("^",substring(MITREordered$Techniques[i],1,str_length(MITREordered$Techniques[i])-4),"$",sep=""),shield.relations$to)
MITREordered$Shield[i] <- list(shield.relations$from[aux])
}
i <- i + 1
}
i <- 1
MITRESHIELD <- MITREordered[1,]
MITRESHIELD <- MITRESHIELD[-1,]
while(i<=nrow(MITREordered))
{
j <- length(unlist(MITREordered$Shield[i]))
if (j>1)
{
aux <- 0
while (aux < j)
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
MITRESHIELD[i+aux,ncol(MITRESHIELD)] <- unlist(MITREordered$Shield[i])[aux+1]
aux <- aux + 1
}
}else
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
}
i <- i + j
}
i <- 1
while (i<= nrow(MITRESHIELD))
{
aux <- grep(paste("^",MITRESHIELD$Shield[i],"$",sep=""),shield.techniques$id)
MITRESHIELD$ShieldName[i] <- unlist(shield.techniques$name[aux])
MITRESHIELD$ShieldDesc[i] <- list(shield.techniques$description[aux])
i <- i + 1
}
MITRESHIELD$ShieldName <- unlist(MITRESHIELD$ShieldName)
graphic2 <- ggplot(data = MITRESHIELD, mapping = aes(ShieldName,Name))
graphic2 + geom_point() + # Show dots
geom_label(
label=MITRESHIELD$CAPEC,
nudge_x = 0, nudge_y = 0,
) +
xlab("Técnicas de Defensa") +
ylab("Técnicas de Ataque") +
ggtitle(paste("Técnicas de Defensa vs Técnicas de Ataque y sus respectivas CAPEC de",producto,sep = " ")) +
labs(fill = "CAPEC")
knitr::opts_chunk$set(echo = TRUE)
kable(cpeordered, caption= "CPEs de Rockwell obtenidos de la base de datos de NIST", booktabs = TRUE)
kable(CVE, caption= "CVEs de Rockwell obtenidos de la base de datos de NIST", booktabs = TRUE)
graphic1 <- ggplot(data = cpemorevuln, mapping = aes(x = total, y = title, fill = as.factor(title)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de vulnerabilidades") +
ylab("CPE") +
ggtitle(paste("Gráfico de los 30 CPEs más vulnerables de",producto,sep = " ")) +
labs(fill = "CPEs")
graphic2 <- ggplot(data = CVEorderedtop, mapping = aes(score,CVEs))
graphic2 + geom_point() + # Show dots
geom_label(
label=CVEorderedtop$CWE,
nudge_x = 0.25, nudge_y = 0.25,
) +
xlab("CVSS score") +
ylab("CVE") +
ggtitle(paste("Gráfico de los CVEs vs CVSS Score",producto,sep = " ")) +
labs(fill = "CVEs")
kable(CAPECordered, caption= "Amenazas sobre los activos de Rockwell", booktabs = TRUE)
graphic1 <- ggplot(data = TOPCAPEC, mapping = aes(x = total, y = CAPEC, fill = as.factor(total)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de CAPECs") +
ylab("CAPEC") +
ggtitle(paste("Gráfico de los TOP 40 Amenazas en",producto,sep = " ")) +
labs(fill = "CAPECs")
kable(MITRE, caption= "Listado de Técnicas de Ataque a la que están expuestos los CPE de Rockwell", booktabs = TRUE)
load(file="capec.relations.rda")
warning()
warning()
View(capec.patterns)
source('C:/DEVEL/DMProject/mitre-capec.R')
source('C:/DEVEL/DMProject/mitre-capec.R')
View(capec.patterns)
View(capec.relations)
View(views)
View(categories)
source('C:/DEVEL/DMProject/nist-cve.R')
View(cves)
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
library
library
library
cpeordered[1,3]                                       #Muestro cuantos CVE tiene el primer CPE
aux <- nrow(cpeordered)                               #Cuento todas las líneas de CPEs
CVE <- data.frame(cpeordered$vuln[1])                 #Llevo a un nuevo dataframe todas los CVEs del primer CPE
colnames(CVE) <- "CVEs"                               #Le pongo de nombre a la columna CVEs
i <- 2                                                #Auxiliar en 2
while (i <= aux){                                     #Voy añadiendo al dataframe anterior todas las listas de CVEs que existen en el dataframe CPE
CVE2 <- data.frame(cpeordered$vuln[i])
colnames(CVE2) <- "CVEs"
CVE <- rbind(CVE,CVE2)
distinct(CVE)
i <- i + 1
}
i <- 2
while (i <= nrow(CVE)){
j <- i - 1
while (j > 0){
if (CVE[i,1] == CVE[j,1]){
CVE[i,1] <- 0
}
j <- j - 1
}
i <- i + 1
}
CVEf <- data.frame(CVE[1,1])
colnames(CVEf) <- "CVEs"
i <- 2
while (i <= nrow(CVE)){
if(CVE[i,1] != 0){
CVEf <- rbind(CVEf,CVE[i,1])
}
i <- i + 1
}
CVEf$total <- lapply(lapply(CVEf[,1],cpeordered$vuln,FUN = grep), length)
CVEf$pos <- lapply(CVEf[,1],cpeordered$vuln,FUN = grep)
CVEf$total <- as.numeric(CVEf[,2])
CVEordered <- CVEf[order(CVEf$total,decreasing = TRUE),]
producto <- "Rockwell"
topcve <- CVEordered[1:30,]
color <- c(1:nrow(topcve))
graphic1 <- ggplot(data = topcve, mapping = aes(x = total, y = CVEs, fill = as.factor(color)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de CPEs") +
ylab("CVE") +
ggtitle(paste("Gráfico de los TOP 30 Vulnerabilidades en",producto,sep = " ")) +
labs(fill = "CVEs")
jason <- paste("https://services.nvd.nist.gov/rest/json/cve/1.0/",topcve[1,1],sep="")
api <- fromJSON(jason)
CVEordered$severity <- ""
CVEordered$score <- 0
CVEordered$version <- ""
CVEordered$time <- ""
CVEordered$description <- ""
CVEordered$CWE <- ""
View(CVEordered)
source('C:/DEVEL/DMProject/nist-cve.R')
View(cve.nist)
View(CVEordered)
write.csv(cve.nist,"cves.csv")
cves <- read.csv("cves.csv")
View(cves)
grep(CVEordered$CVEs[1],cves$cve.id)
source('C:/DEVEL/DMProject/DMVulnCVEv2.R', encoding = 'UTF-8')
CVEorderedtop <- CVEordered[1:40,]
graphic2 <- ggplot(data = CVEorderedtop, mapping = aes(score,CVEs))
graphic2 + geom_point() + # Show dots
geom_label(
label=CVEorderedtop$CWE,
nudge_x = 0.25, nudge_y = 0.25,
) +
xlab("CVSS score") +
ylab("CVE") +
ggtitle(paste("Gráfico de los CVEs vs CVSS Score",producto,sep = " ")) +
labs(fill = "CVEs")
print(nrow(cwes))                                               #Muestro el número de filas de la tabla cwes
load("C:/DEVEL/DMProject/cwes.rda")
print(nrow(cwes))                                               #Muestro el número de filas de la tabla cwes
CVEordered$CWE[1]
length(CVEordered$CWE[1])
length(unlist(CVEordered$CWE[1])
)
str_length(CVEordered$CWE[1])
substring(CVEordered$CWE[1],1,str_length(CVEordered$CWE[1])-1)
substring(CVEordered$CWE[1],3,str_length(CVEordered$CWE[1])-3)
substring(CVEordered$CWE[1],3,str_length(CVEordered$CWE[1])-2)
source('C:/DEVEL/DMProject/DMVulnCVEv2.R', encoding = 'UTF-8')
CVEorderedtop <- CVEordered[1:40,]
graphic2 <- ggplot(data = CVEorderedtop, mapping = aes(score,CVEs))
graphic2 + geom_point() + # Show dots
geom_label(
label=CVEorderedtop$CWE,
nudge_x = 0.25, nudge_y = 0.25,
) +
xlab("CVSS score") +
ylab("CVE") +
ggtitle(paste("Gráfico de los CVEs vs CVSS Score",producto,sep = " ")) +
labs(fill = "CVEs")
source('C:/DEVEL/DMProject/DMAttack.R', encoding = 'UTF-8')
TOPCAPEC <- CAPECordered[1:40,]
color <- c(1:nrow(TOPCAPEC))
graphic1 <- ggplot(data = TOPCAPEC, mapping = aes(x = total, y = CAPEC, fill = as.factor(total)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de Debilidades") +
ylab("CAPEC") +
ggtitle(paste("Gráfico de los TOP 40 Amenazas en",producto,sep = " ")) +
labs(fill = "CAPECs")
source('C:/DEVEL/DMProject/DMAttack2.R')
plot <- ggplot(CAPECordered, aes(x = Likelihood, y = Severity)) + geom_tile(aes(fill= Risk)) + scale_fill_manual(breaks = c("Critical","High","Medium","Low"),values = c("Red","Orange","Yellow","Green"))
plot + scale_x_discrete(limit = c("Unknown", "Low", "Medium","High"))+
scale_y_discrete(limit = c("Unknown","Very Low", "Low", "Medium","High","Very High")) + geom_label_repel(label=CAPECordered$CAPEC,
nudge_x = 0, nudge_y = 0,
size =3, max.overlaps = 139)
capecs.relations <- file.show("capec.relations.rda")
source('C:/DEVEL/DMProject/DMMitre.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMMitre.R', encoding = 'UTF-8')
load("C:/DEVEL/DMProject/attck.techniques.rda")
source('C:/DEVEL/DMProject/DMMitre.R', encoding = 'UTF-8')
load("C:/DEVEL/DMProject/capec.relations.rda")
load("C:/DEVEL/DMProject/capec.patterns.rda")
source('C:/DEVEL/DMProject/DMMitre.R', encoding = 'UTF-8')
mitre <- subset(capec.relations,capec.relations$name == "ATTACK")
mitre2 <- subset(capec.relations,capec.relations$name == "ChildOf")
mitre3 <- subset(capec.relations,capec.relations$name == "take advantage of")
i <- 1
while (i <= nrow((CAPECordered)))
{
aux <- list(subset(mitre,mitre$from == CAPECordered$CAPEC[i])[,3])
if (length(grep("T",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
aux <- list(subset(mitre2,mitre2$from == CAPECordered$CAPEC[i])[,3])
if (length(grep("C",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
aux <- list(subset(mitre3,mitre3$from == CAPECordered$CAPEC[i])[,3])
if(length(grep("C",aux)) != 0)
{
CAPECordered$Relations[i] <- aux
}else{
CAPECordered$Relations[i] <- 0
}
}
}
i <- i + 1
}
test <- data.frame(CAPECordered[grep("^T",CAPECordered$Relations),])
aux <- nrow(test)                               #Cuento todas las líneas de CWEs
MITRE <- data.frame(str_split(test$Relations[1],","))                 #Llevo a un nuevo dataframe todas los CVEs del primer CPE
#CAPEC <- unlist(strsplit(CAPEC$CAPEC[1], split=':', fixed=TRUE))[2]
colnames(MITRE) <- "Techniques"                               #Le pongo de nombre a la columna CVEs
i <- 2                                                #Auxiliar en 2
while (i <= aux){                                     #Voy añadiendo al dataframe anterior todas las listas de CVEs que existen en el dataframe CPE
MITRE2 <- data.frame(str_split(test$Relations[i],","))
colnames(MITRE2) <- "Techniques"
MITRE <- rbind(MITRE,MITRE2)
distinct(MITRE)
i <- i + 1
}
i <- 2
while (i <= nrow(MITRE)){
j <- i - 1
while (j > 0){
if (MITRE[i,1] == MITRE[j,1]){
MITRE[i,1] <- 0
}
j <- j - 1
}
i <- i + 1
}
MITREf <- data.frame(MITRE[1,])
colnames(MITREf) <- c("Techniques")
i <- 2
while (i <= nrow(MITRE)){
if(MITRE[i,1] != 0){
MITREf <- rbind(MITREf,MITRE[i,])
}
i <- i + 1
}
MITREf$total <- lapply(lapply(MITREf[,1],test$Relations,FUN = grep), length)
MITREf$pos <- lapply(MITREf[,1],test$Relations,FUN = grep)
MITREf$total <- as.numeric(MITREf[,2])
MITREordered <- MITREf[order(MITREf$total,decreasing = TRUE),]
graphic1 <- ggplot(data = MITREordered, mapping = aes(x = total, y = Techniques, fill = as.factor(Techniques)))
graphic1 + geom_bar(stat = 'identity') +
xlab("Total de Técnicas de Ataque") +
ylab("Techniques") +
ggtitle(paste("Gráfico de las técnicas de ataques presentes en",producto,sep = " ")) +
labs(fill = "Techniques")
i <- 1
while (i<= nrow(MITREordered))
{
MITREordered$CAPEC[i] <- CAPECordered$CAPEC[unlist(MITREf$pos[i])]
aux <- grep(paste("^",MITREordered$Techniques[i],"$",sep=""),attck.techniques$external_id)
if (length(aux)==1)
{
MITREordered$Name[i] <- attck.techniques$name[aux]
MITREordered$Description[i] <- attck.techniques$description[aux]
MITREordered$Url[i] <- attck.techniques$url[aux]
}else{
MITREordered$Name[i] <- attck.techniques$name[aux[1]]
MITREordered$Description[i] <- attck.techniques$description[aux[1]]
MITREordered$Url[i] <- attck.techniques$url[aux[1]]
}
i <- i + 1
}
shield.relations <- file.show("shield.relations.rda")
shield.techniques <- file.show("shield.techniques.rda")
source('C:/DEVEL/DMProject/DMSD.R', encoding = 'UTF-8')
i <- 1
while (i<= nrow(MITREordered))
{
aux <- grep(paste("^",MITREordered$Techniques[i],"$",sep=""),shield.relations$to)
if (length(aux)>=1)
{
MITREordered$Shield[i] <- list(shield.relations$from[aux])
}else{
aux <- grep(paste("^",substring(MITREordered$Techniques[i],1,str_length(MITREordered$Techniques[i])-4),"$",sep=""),shield.relations$to)
MITREordered$Shield[i] <- list(shield.relations$from[aux])
}
i <- i + 1
}
i <- 1
MITRESHIELD <- MITREordered[1,]
MITRESHIELD <- MITRESHIELD[-1,]
while(i<=nrow(MITREordered))
{
j <- length(unlist(MITREordered$Shield[i]))
if (j>1)
{
aux <- 0
while (aux < j)
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
MITRESHIELD[i+aux,ncol(MITRESHIELD)] <- unlist(MITREordered$Shield[i])[aux+1]
aux <- aux + 1
}
}else
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
}
i <- i + j
}
j <- length(unlist(MITREordered$Shield[i]))
if (j>1)
{
aux <- 0
while (aux < j)
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
MITRESHIELD[i+aux,ncol(MITRESHIELD)] <- unlist(MITREordered$Shield[i])[aux+1]
aux <- aux + 1
}
}else
{
MITRESHIELD <- rbind(MITRESHIELD,MITREordered[i,])
}
i <- i + j
View(MITREordered)
j <- length(unlist(MITREordered$Shield[i]))
load("C:/DEVEL/DMProject/shield.relations.rda")
load("C:/DEVEL/DMProject/shield.techniques.rda")
source('C:/DEVEL/DMProject/DMSD.R', encoding = 'UTF-8')
graphic2 <- ggplot(data = MITRESHIELD, mapping = aes(ShieldName,Name))
graphic2 + geom_point() + # Show dots
geom_label(
label=MITRESHIELD$CAPEC,
nudge_x = 0, nudge_y = 0,aes(fill = factor(total)), colour = "white", fontface = "bold"
) +
xlab("Técnicas de Defensa") +
ylab("Técnicas de Ataque") +
ggtitle(paste("Técnicas de Defensa vs Técnicas de Ataque y sus respectivas CAPEC de",producto,sep = " ")) +
labs(fill = "CAPEC")+ theme_light()
source('C:/DEVEL/DMProject/DMVuln.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMVulnCVEv2.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMAttack.R', encoding = 'UTF-8')
source('C:/DEVEL/DMProject/DMAttack2.R')
source('C:/DEVEL/DMProject/DMMitre.R', encoding = 'UTF-8')
View(test)
View(CVEordered)
View(CAPECordered)
View(CAPECordered)
>>>>>>> Stashed changes
